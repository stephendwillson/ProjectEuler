import euler_lib


def main():

    target = 500

    divisors = 0
    triangle = 0

    i = 0
    while divisors <= target:
        i += 1

        triangle = euler_lib.get_triangle_number(i)
        divisors = euler_lib.get_number_of_factors(triangle)

    return triangle


def description():

    desc = """
https://projecteuler.net/problem=12

The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first
ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred
divisors?
"""
    print(desc, end="")


PE_NAME = "HIGHLY DIVISIBLE TRIANGULAR NUMBER"
PE_SOLUTION = 76576500

if __name__ == "__main__":
    print(main())
