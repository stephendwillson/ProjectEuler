"""
https://projecteuler.net/problem=12

The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
"""

import time
import math

def main():

    n = 500

    # start_time = time.process_time()
    # takes ~17000s
    # triangle, divisors = div(n, fast=False)
    # end_time = time.process_time()
    
    # print("time to calculate slow: {}".format(end_time - start_time))
    # print("triangle: {}".format(triangle))
    # print("number of divisors: {}".format(len(divisors)))

    start_time = time.process_time()
    # takes ~6s
    triangle, divisors = div(n, fast=True)
    end_time = time.process_time()

    print("time to calculate fast: {}".format(end_time - start_time))
    print("triangle: {}".format(triangle))
    print("number of divisors: {}".format(len(divisors)))

def div(n, fast):

    divisors = list()
    tmp = list()

    i = 0
    while len(divisors) < n:
        i += 1

        triangle = triangle_number(i)
        if (fast):
            divisors = get_divisors_fast(triangle)
        else:
            divisors = get_divisors_slow(triangle)

        if (len(divisors) > len(tmp)):
            tmp = divisors

    return triangle, divisors

def get_divisors_slow(n):

    divisors = list()

    for i in range(1, n + 1):
        if (n % i == 0):
            divisors.append(i)
    
    return divisors

def get_divisors_fast(n):

    divisors = list()

    for i in range(1, int(math.sqrt(n)) + 1):
        if (n % i == 0):
            divisors.append(n // i)
            if (i not in divisors):
                divisors.append(i)

    return divisors

def triangle_number(n):

    triangle = 0
    for i in range(1, n + 1):
        triangle += i
    
    return triangle

main()
