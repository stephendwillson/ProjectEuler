import math


def main():

    adj_digits = 13
    n = (
        "7316717653133062491922511967442657474235534919493496983520312774506"
        "3262395783180169848018694788518438586156078911294949545950173795833"
        "1952853208805511125406987471585238630507156932909632952274430435576"
        "6896648950445244523161731856403098711121722383113622298934233803081"
        "3533627661428280644448664523874930358907296290491560440772390713810"
        "5158593079608667017242712188399879790879227492190169972088809377665"
        "7273330010533678812202354218097512545405947522435258490771167055601"
        "3604839586446706324415722155397536978179778461740649551492908625693"
        "2197846862248283972241375657056057490261407972968652414535100474821"
        "6637048440319989000889524345065854122758866688116427171479924442928"
        "2308634656748139191231628245861786645835912456652947654568284891288"
        "3142607690042242190226710556263211111093705442175069416589604080719"
        "8403850962455444362981230987879927244284909188845801561660979191338"
        "7549920052406368991256071760605886116467109405077541002256983155200"
        "05593572972571636269561882670428252483600823257530420752963450"
    )

    prod = -1
    tmp_digits = []

    for i in range(0, len(n) - adj_digits + 1):

        tmp_digits.clear()

        # grab N adjacent digits and stuff into list
        for j in range(0, adj_digits):
            tmp_digits.append(n[i + j])  # type: ignore

        # convert back to int for math.prod
        tmp_digits = [int(i) for i in tmp_digits]

        # keep track of new greatest product + digits for prints later
        if math.prod(tmp_digits) > prod:
            prod = math.prod(tmp_digits)

    return prod


def description():

    desc = """
https://projecteuler.net/problem=8

The four adjacent digits in the 1000-digit number that have the greatest
product are 9 x 9 x 8 x 9 = 5832.

73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450

Find the thirteen adjacent digits in the 1000-digit number that have the
greatest product. What is the value of this product?
"""
    print(desc, end="")


PE_NAME = "LARGEST PRODUCT IN A SERIES"
PE_SOLUTION = 23514624000

if __name__ == "__main__":
    print(main())
